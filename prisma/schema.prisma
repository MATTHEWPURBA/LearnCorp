// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id             String   @id @default(cuid())
  clerkUserId    String   @unique
  email          String
  firstName      String?
  lastName       String?
  role           Role     @default(LEARNER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  enrollments    Enrollment[]
  quizAttempts   QuizAttempt[]
}

enum Role { 
  ADMIN 
  INSTRUCTOR 
  LEARNER 
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  thumbnail   String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  enrollments Enrollment[]
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  youtubeId   String?
  assetKey    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quiz        Quiz?
}

model Enrollment {
  id            String   @id @default(cuid())
  userProfileId String
  courseId      String
  completedAt   DateTime?
  progress      Int      @default(0) // percentage
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  UserProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  Course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userProfileId, courseId])
}

model Quiz {
  id        String   @id @default(cuid())
  lessonId  String   @unique
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  questions QuizQuestion[]
  attempts  QuizAttempt[]
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id       String  @id @default(cuid())
  quizId   String
  prompt   String
  a        String
  b        String
  c        String
  d        String
  correct  String  // 'a' | 'b' | 'c' | 'd'
  createdAt DateTime @default(now())
  Quiz     Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id            String   @id @default(cuid())
  userProfileId String
  quizId        String
  score         Int
  totalQuestions Int
  answers       Json     // Store user's answers
  createdAt     DateTime @default(now())
  UserProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  Quiz          Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model LiveSession {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  startTime DateTime
  endTime   DateTime?
  roomName  String   @unique
  status    LiveSessionStatus @default(SCHEDULED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LiveSessionStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}
